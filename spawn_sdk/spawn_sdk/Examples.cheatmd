# Examples

## Using Named Actors

```elixir
# my_actor.ex
defmodule SpawnSdkExample.Actors.MyActor do
  use SpawnSdk.Actor,
    name: "jose", # Default is Full Qualified Module name a.k.a __MODULE__
    kind: :named, # Default is already :uÂ«named. Valid are :named | :unnamed | :pooled
    stateful: true, # Default is already true
    state_type: Io.Eigr.Spawn.Example.MyState,
    deactivate_timeout: 30_000,
    snapshot_timeout: 2_000

  require Logger

  alias Io.Eigr.Spawn.Example.{MyState, MyBusinessMessage}

  defact init(%Context{state: state} = ctx) do
    Logger.info("[joe] Received InitRequest. Context: #{inspect(ctx)}")

    %Value{}
    |> Value.state(state)
    |> Value.reply!()
  end

  defact sum(
           %MyBusinessMessage{value: value} = data,
           %Context{state: state} = ctx
         ) do
    Logger.info("Received Request: #{inspect(data)}. Context: #{inspect(ctx)}")

    new_value = if is_nil(state), do: value, else: (state.value || 0) + value

    %Value{}
    |> Value.of(%MyBusinessMessage{value: new_value}, %MyState{value: new_value})
    |> Value.reply!()
  end
end

# Invoking Named Actor

iex> SpawnSdk.invoke("joe", system: "spawn-system", action: "sum", payload: %Io.Eigr.Spawn.Example.MyBusinessMessage{value: 1})
  {:ok, %Io.Eigr.Spawn.Example.MyBusinessMessage{value: 12}

#  Invoke Actors with a delay set in milliseconds
SpawnSdk.invoke("joe", system: "spawn-system", action: "ping", delay: 5_000)
  {:ok, :async}

# Invoke Actors scheduled to a specific DateTime
SpawnSdk.invoke("joe", system: "spawn-system", action: "ping", scheduled_to: ~U[2023-01-01 00:32:00.145Z])
  {:ok, :async}
```

## Using Unnamed Actors

```elixir
# Unnamed.ex
defmodule SpawnSdkExample.Actors.UnnamedActor do
  use SpawnSdk.Actor,
    name: "unnamed_actor",
    kind: :unnamed,
    state_type: Io.Eigr.Spawn.Example.MyState

  require Logger

  alias Io.Eigr.Spawn.Example.{MyState, MyBusinessMessage}

  defact sum(
           %MyBusinessMessage{value: value} = data,
           %Context{state: state} = ctx
         ) do
    Logger.info("Received Request: #{inspect(data)}. Context: #{inspect(ctx)}")

    new_value = if is_nil(state), do: value, else: (state.value || 0) + value

    %Value{}
    |> Value.of(%MyBusinessMessage{value: new_value}, %MyState{value: new_value})
    |> Value.reply!()
  end
end

# Spawning Unnamed actors
SpawnSdk.spawn_actor("robert", system: "spawn-system", actor: "unnamed_actor")
  :ok

#  Invoke Spawned Actors
SpawnSdk.invoke("robert", system: "spawn-system", action: "sum", payload: %Io.Eigr.Spawn.Example.MyBusinessMessage{value: 1})
  {:ok, %Io.Eigr.Spawn.Example.MyBusinessMessage{value: 16}}

#  Invoke Actors in a lazy way without having to spawn them before
SpawnSdk.invoke("robert_lazy", ref: SpawnSdkExample.Actors.UnnamedActor, system: "spawn-system", action: "sum", payload: %Io.Eigr.Spawn.Example.MyBusinessMessage{value: 1})
  {:ok, %Io.Eigr.Spawn.Example.MyBusinessMessage{value: 1}}  
```

## Using Pooled Actors

```elixir
# pooled.ex
defmodule SpawnSdkExample.Actors.PooledActor do
  use SpawnSdk.Actor,
    name: "pooled_actor",
    kind: :pooled,
    stateful: false

  require Logger

  defact ping(_data, %Context{} = ctx) do
    Logger.info("Received Request. Context: #{inspect(ctx)}")

    Value.of()
    |> Value.void()
  end
end

# Invoke Pooled Actors
SpawnSdk.invoke("pooled_actor", system: "spawn-system", action: "ping", pooled: true)
  {:ok, nil}
```

## Using Timer Actions

```elixir
defmodule SpawnSdkExample.Actors.ClockActor do
  use SpawnSdk.Actor,
    name: "clock_actor",
    state_type: Io.Eigr.Spawn.Example.MyState,
    deactivate_timeout: 86_400_000

  require Logger

  alias Io.Eigr.Spawn.Example.MyState

  @set_timer 15_000
  defact clock(%Context{state: state} = ctx) do
    Logger.info("[clock] Clock Actor Received Request. Context: #{inspect(ctx)}")

    new_value = if is_nil(state), do: 0, else: state.value + 1
    new_state = %MyState{value: new_value}

    Value.of()
    |> Value.state(new_state)
    |> Value.noreply!()
  end
end
```

## Worflows

```elixir
# side_effect.ex
defmodule SpawnSdkExample.Actors.UnnamedActor do
  use SpawnSdk.Actor,
    kind: :unnamed,
    stateful: false,
    state_type: Io.Eigr.Spawn.Example.MyState

  require Logger

  alias Io.Eigr.Spawn.Example.{MyState, MyBusinessMessage}

  alias SpawnSdk.Flow.SideEffect

  defact sum(%MyBusinessMessage{value: value} = data, %Context{state: state} = ctx) do
    Logger.info("Received Request: #{inspect(data)}. Context: #{inspect(ctx)}")

    new_value = if is_nil(state), do: value, else: (state.value || 0) + value

    result = %MyBusinessMessage{value: new_value}
    new_state = %MyState{value: new_value}

    Value.of()
    |> Value.value(result)
    |> Value.state(new_state)
    |> Value.effects(
      # This returns a list of side effects. In this case containing only one effect. However, multiple effects can be chained together,
      # just by calling the effect function as shown here.
      # The delay means that it will be fired asynchronously after 5000 milliseconds (5 seconds)
      # If only one effect is desired, you can also choose to use the to/3 function together with Value.effect().
      # Example: Values.effect(SideEffect.to(name, func, payload))
      SideEffect.of()
      |> SideEffect.effect("joe", :sum, result, delay: 5_000)
    )
    |> Value.reply!()
  end
end

```

```elixir
# Pipes and Forwards

# pipe_forward.ex
defmodule SpawnSdkExample.Actors.ForwardPipeActor do
  use SpawnSdk.Actor,
    name: "pipeforward",
    kind: :named,
    stateful: false

  require Logger

  alias Io.Eigr.Spawn.Example.MyBusinessMessage

  defact forward_example(%MyBusinessMessage{} = msg, _ctx) do
    Logger.info("Received request with #{msg.value}")

    Value.of()
    |> Value.value(%MyBusinessMessage{value: 999})
    |> Value.forward(
      Forward.to("second_actor", "sum_plus_one")
    )
    |> Value.void()
  end

  defact pipe_example(%MyBusinessMessage{} = msg, _ctx) do
    Logger.info("Received request with #{msg.value}")

    Value.of()
    |> Value.value(%MyBusinessMessage{value: 999})
    |> Value.pipe(
      Pipe.to("second_actor", "sum_plus_one")
    )
    |> Value.void()
  end
end

# other.ex
defmodule SpawnSdkExample.Actors.SecondActorExample do
  use SpawnSdk.Actor,
    name: "second_actor",
    stateful: false

  require Logger

  alias Io.Eigr.Spawn.Example.MyBusinessMessage

  defact sum_plus_one(%MyBusinessMessage{} = msg, _ctx) do
    Logger.info("Received request with #{msg.value}")

    Value.of()
    |> Value.value(%MyBusinessMessage{value: msg.value + 1})
    |> Value.void()
  end
end

```

```elixir
# Broadcast
# driver.ex
defmodule Fleet.Actors.Driver do
  use SpawnSdk.Actor,
    kind: :unnamed,
    state_type: Fleet.Domain.Driver

  alias Fleet.Domain.{
    Driver,
    OfferRequest,
    OfferResponse,
    Point
  }

  require Logger

  @brain_actor_channel "fleet.controllers.topic"

  defact update_position(%Point{} = position, %Context{state: %Driver{id: name} = driver} = ctx) do
    Logger.info(
      "Driver [#{name}] Received Update Position Event. Position: [{inspect(position)}]. Context: #{inspect(ctx)}"
    )

    driver_state = %Driver{driver | position: position}

    %Value{}
    |> Value.of(driver_state, driver_state)
    |> Value.broadcast(
      Broadcast.to(
        @brain_actor_channel,
        driver_state
      )
    )
  end
end

defmodule Fleet.Actors.FleetControllersActor do
  use SpawnSdk.Actor,
    kind: :unnamed,
    channels: [
      {"fleet.controllers.topic", "update_position_receive"}
    ] # or just ["fleet.controllers.topic"] and it will forward to a action called receive

  alias Fleet.Domain.Point

  defact update_position_receive(%Point{} = position, _ctx) do
    Logger.info(
      "Received Update Position Event. Position: [#{inspect(position)}]"
    )

    Value.of()
  end
end
```

## Declaring the supervision tree

```elixir
# application.ex
defmodule SpawnSdkExample.Application do
  @moduledoc false
  use Application

  @impl true
  def start(_type, _args) do
    children = [
      {
        SpawnSdk.System.Supervisor,
        system: "spawn-system",
        actors: [
          # your actors here
          SpawnSdkExample.Actors.MyActor,
          SpawnSdkExample.Actors.UnnamedActor,
          SpawnSdkExample.Actors.ClockActor,
          SpawnSdkExample.Actors.PooledActor
        ]
      }
    ]

    opts = [strategy: :one_for_one, name: SpawnSdkExample.Supervisor]
    Supervisor.start_link(children, opts)
  end
end
```